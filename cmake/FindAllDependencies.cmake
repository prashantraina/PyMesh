# MKL
IF (NOT MKL_FOUND)
    FIND_PACKAGE(MKL)
ENDIF (NOT MKL_FOUND)

# Include Eigen
IF (NOT EIGEN_FOUND)
    FIND_PACKAGE(Eigen REQUIRED)
ENDIF (NOT EIGEN_FOUND)

# TBB
IF (NOT TBB_FOUND)
    SET(TBB_ROOT ${PROJECT_SOURCE_DIR}/python/pymesh/third_party/)
    FIND_PACKAGE(TBB REQUIRED)
ENDIF (NOT TBB_FOUND)

# OpenCL
IF (NOT OPENCL_FOUND)
    FIND_PACKAGE(OpenCL)
ENDIF (NOT OPENCL_FOUND)

# SpraseHash
IF (NOT SPARSEHAHS_FOUND)
    FIND_PACKAGE(SparseHash)
ENDIF (NOT SPARSEHAHS_FOUND)

# GMP
IF (NOT GMP_FOUND)
    FIND_PACKAGE(GMP)
ENDIF (NOT GMP_FOUND)

# MPFR
IF (NOT MPFR_FOUND)
    FIND_PACKAGE(MPFR)
ENDIF (NOT MPFR_FOUND)

# Embree
IF (NOT EMBREE_FOUND)
    FIND_PACKAGE(Embree REQUIRED)
ENDIF (NOT EMBREE_FOUND)

# CGAL
IF (NOT CGAL_FOUND)
    SET(CGAL_DIRS
        "${PROJECT_SOURCE_DIR}/python/pymesh/third_party/lib/cmake/CGAL"
        "${PROJECT_SOURCE_DIR}/python/pymesh/third_party/lib64/cmake/CGAL"
    )
    IF (NOT Boost_FOUND)
        SET(BOOST_ROOT ${PROJECT_SOURCE_DIR}/python/pymesh/third_party)
        FIND_PACKAGE(Boost COMPONENTS atomic chrono date_time system thread)
    ENDIF (NOT Boost_FOUND)
    FIND_PACKAGE(CGAL QUIET PATHS ${CGAL_DIRS} NO_DEFAULT_PATH)
ENDIF (NOT CGAL_FOUND)

# MMG
IF (NOT MMG_FOUND)
    IF (DEFINED ENV{MMG_PATH})
        SET(MMG_BUILD_DIR $ENV{MMG_PATH})
    ELSE (DEFINED ENV{MMG_PATH})
        SET(MMG_BUILD_DIR ${PROJECT_SOURCE_DIR}/python/pymesh/third_party/)
    ENDIF (DEFINED ENV{MMG_PATH})
    FIND_PACKAGE(Mmg)
ENDIF (NOT MMG_FOUND)

# Qhull
IF (NOT QHULL_FOUND)
    SET(QHULL_USE_STATIC TRUE)
    IF (DEFINED ENV{QHULL_PATH})
        SET(QHULL_ROOT $ENV{QHULL_PATH})
    ENDIF (DEFINED ENV{QHULL_PATH})
    FIND_PACKAGE(Qhull)
ENDIF (NOT QHULL_FOUND)

# Quartet
IF (NOT QUARTET_FOUND)
    FIND_PACKAGE(Quartet)
ENDIF (NOT QUARTET_FOUND)

# Triangle
IF (NOT TRIANGLE_FOUND)
    FIND_PACKAGE(Triangle)
ENDIF (NOT TRIANGLE_FOUND)

# Tetgen
IF (NOT TETGEN_FOUND)
    FIND_PACKAGE(Tetgen)
ENDIF (NOT TETGEN_FOUND)

# Cork
IF (NOT CORK_FOUND)
    FIND_PACKAGE(Cork)
ENDIF(NOT CORK_FOUND)

# Clipper
IF (NOT CLIPPER_FOUND)
    FIND_PACKAGE(Clipper)
ENDIF (NOT CLIPPER_FOUND)

# libigl
IF (NOT LIBIGL_FOUND)
    FIND_PACKAGE(libigl)
ENDIF (NOT LIBIGL_FOUND)

# Carve
IF (NOT CARVE_FOUND)
    FIND_PACKAGE(Carve)
ENDIF (NOT CARVE_FOUND)

# BSP
IF (NOT BSP_FOUND)
    FIND_PACKAGE(BSP)
ENDIF (NOT BSP_FOUND)

# SuiteSparse
IF (NOT UMFPACK_FOUND)
    FIND_PACKAGE(Umfpack)
ENDIF (NOT UMFPACK_FOUND)

# Cholmod
IF (NOT CHOLMOD_FOUND)
    FIND_PACKAGE(Cholmod)
ENDIF (NOT CHOLMOD_FOUND)

# Metis
IF (NOT METIS_FOUND)
    FIND_PACKAGE(Metis)
ENDIF (NOT METIS_FOUND)

# tinyxml2
IF (NOT TINYXML2_FOUND)
    FIND_PACKAGE(tinyxml2)
ENDIF (NOT TINYXML2_FOUND)

# Lapack
IF (NOT LAPACK_FOUND)
    FIND_PACKAGE(LAPACK)
ENDIF (NOT LAPACK_FOUND)

# Geogram
IF (NOT GEOGRAM_FOUND)
    SET(GEOGRAM_INSTALL_PREFIX ${PROJECT_SOURCE_DIR}/python/pymesh/third_party)
    FIND_PACKAGE(Geogram)
ENDIF (NOT GEOGRAM_FOUND)

# Draco
IF (NOT draco_FOUND)
    FIND_PACKAGE(Draco)
ENDIF (NOT draco_FOUND)

# TetWild
IF (NOT TETWILD_FOUND)
    FIND_PACKAGE(TetWild)
ENDIF (NOT TETWILD_FOUND)

# openmp
IF (NOT OPENMP_FOUND)
    FIND_PACKAGE(OpenMP QUIET)
    IF (OPENMP_FOUND)
        SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}")
        SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS}")
        MESSAGE(STATUS "OpenMP found")
    ELSE(OPENMP_FOUND)
        MESSAGE(STATUS "OpenMP not found")
    ENDIF (OPENMP_FOUND)
ENDIF (NOT OPENMP_FOUND)

# Fast winding number
IF (NOT FAST_WINDING_NUMBER_FOUND)
    FIND_PACKAGE(FastWindingNumber)
ENDIF (NOT FAST_WINDING_NUMBER_FOUND)

IF (NOT JIGSAW_FOUND)
    FIND_PACKAGE(Jigsaw)
ENDIF (NOT JIGSAW_FOUND)
